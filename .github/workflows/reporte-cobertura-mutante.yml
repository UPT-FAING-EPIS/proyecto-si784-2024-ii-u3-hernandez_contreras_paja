name: Pruebas y Publicación en GitHub Pages

on: 
  push:
    branches: 
      - main  
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Instalar herramientas necesarias
      run: |
        dotnet tool install --global SpecFlow.Plus.LivingDoc.CLI
        dotnet tool install -g dotnet-reportgenerator-globaltool
        dotnet tool install -g dotnet-stryker
        echo "export PATH=\"\$PATH:\$HOME/.dotnet/tools\"" >> $GITHUB_ENV
        python3 -m pip install --upgrade pip
        python3 -m pip install xmltodict

    - name: Ejecutar pruebas y recolectar cobertura y mutaciones
      run: |
        cd ProyectoAsistencia/ProyectoAsistencia.Tests  
        dotnet test --collect:"XPlat Code Coverage"

        reportgenerator "-reports:TestResults/**/coverage.cobertura.xml" "-targetdir:Reports/Cobertura" -reporttypes:HTML

        livingdoc test-assembly ./bin/Debug/net8.0/ProyectoAsistencia.Tests.dll -t TestResults/TestResults.json -o Reports/LivingDoc/LivingDocReport.html

        dotnet stryker

    - name: Mover reporte existente a carpeta ReportesGH
      run: |
        mkdir -p ReportesGH

        # Mover archivo existente container-test-result
        cp ProyectoAsistencia/container-test-result ReportesGH/container-test-result || echo "No se encontró el reporte existente"

        # Copiar reporte de cobertura
        cp ProyectoAsistencia/ProyectoAsistencia.Tests/Reports/Cobertura/index.html ReportesGH/ || echo "No coverage report found"
        cp ProyectoAsistencia/ProyectoAsistencia.Tests/Reports/Cobertura/report.css ReportesGH/ || echo "No coverage CSS found"

        # Copiar LivingDoc
        cp ProyectoAsistencia/ProyectoAsistencia.Tests/Reports/LivingDoc/LivingDocReport.html ReportesGH/ || echo "No LivingDoc report found"

        # Copiar reporte de mutaciones
        if [ -d "ProyectoAsistencia/ProyectoAsistencia.Tests/StrykerOutput" ]; then
          latest_folder=$(ls -td ProyectoAsistencia/ProyectoAsistencia.Tests/StrykerOutput/* | head -n 1)
          cp "$latest_folder/reports/mutation-report.html" ReportesGH/ || echo "No Stryker report found"
        fi

    - name: Verificar contenido de ReportesGH
      run: |
        ls -R ReportesGH || echo "ReportesGH is empty"

    - name: Publicar reportes en GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ReportesGH
